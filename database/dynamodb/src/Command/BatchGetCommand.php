<?php

namespace App\Command;

use App\Helper\ConsumedCapacityTrait;
use App\Table\BatchGetDynamoItemTable;
use Aws\DynamoDb\DynamoDbClient;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class BatchGetCommand extends Command
{
    const CHARACTERS = [
        'Mario', 'Luigi', 'Sonic', 'Wario', 'Browser', 'Danielo', 'Thomas', 'Jules', 'Robin', 'Minecraft',
        'Dragon', 'Harry', 'Bilbon', 'Furet', 'Zeus', 'Bioshock', 'Pinball', 'Tea', 'Cofee', 'Blue',
    ];

    private DynamoDbClient $client;

    use ConsumedCapacityTrait;

    public function __construct(string $name = null)
    {
        $this->client = new DynamoDbClient([
            'region' => 'eu-west-3',
            'version' => '2012-08-10',
            'retries' => 3,
        ]);
        parent::__construct($name);
    }

    protected function configure()
    {
        $this->setName("batch-get");
        $this->addOption('consistent-read', null, InputOption::VALUE_NONE);
        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $keys = [];
        foreach (self::CHARACTERS as $character) {
            $keys[] = [
                "CharacterName" => ["S" => $character],
                "Power" => ["S" => "Fire"],
            ];
        }

        $result = $this->client->batchGetItem([
            "ConsistentRead" => $input->getOption('consistent-read'),
            "RequestItems" => [
                "revision-dynamo" => [
                    "Keys" => $keys,
                ]
            ],
            "ReturnConsumedCapacity" => "INDEXES",
        ]);

        $table = new BatchGetDynamoItemTable($output);
        foreach ($result["Responses"] as $response) {
            foreach ($response as $item) {
                $table->addDynamoItem($item);
            }
        }
        $table->render();

        $output->writeln("debug unprocessed keys : ".json_encode($result['UnprocessedKeys']));

        $this->showConsumeCapacity($result->toArray(), $output);

        return 0;
    }
}