<?php

namespace App\Command;

use App\Helper\ConsumedCapacityTrait;
use App\Helper\ShowTableItemTrait;
use App\Table\ScanQueryDynamoItemTable;
use Aws\DynamoDb\DynamoDbClient;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

class ScanCommand extends Command
{
    use ConsumedCapacityTrait;
    use ShowTableItemTrait;

    private DynamoDbClient $dynamoClient;

    public function __construct(string $name = null)
    {
        $this->dynamoClient = new DynamoDbClient([
            'region' => 'eu-west-3',
            'version' => '2012-08-10',
            'retries' => 0,
        ]);
        parent::__construct($name);
    }

    protected function configure()
    {
        $this->setName("scan");
        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $symfonyStyle = new SymfonyStyle($input, $output);
        $result = $this->dynamoClient->scan([
            'TableName' => 'revision-dynamo',
            'ReturnConsumedCapacity' => 'INDEXES'
        ]);


        $symfonyStyle->section(sprintf(
            "Scanned details (%d items show on %d items scanned)",
            $result['Count'],
            $result['ScannedCount']
        ));

        $listTable = new ScanQueryDynamoItemTable($output);
        foreach ($result['Items'] as $item) {
            $listTable->addDynamoItem($item);
        }
        $listTable->render();

        if (!empty($result['LastEvaluatedKey'])) {
            $symfonyStyle->warning("Result set more than 1MB, LastEvaluatedKey ".json_encode($result['LastEvaluatedKey']));
        }

        $this->showConsumeCapacity($result->toArray(), $symfonyStyle);

        return 0;
    }
}