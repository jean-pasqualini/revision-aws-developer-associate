<?php

namespace App\Table;

use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Helper\TableSeparator;
use Symfony\Component\Console\Output\OutputInterface;

class BatchGetDynamoItemTable extends Table
{
    const ONE_BYTE = 1;
    const ONE_KILOBYTE = self::ONE_BYTE * 1024;
    const FOUR_KILOBYTE = self::ONE_KILOBYTE * 4;
    const ONE_MEGABYTE = self::ONE_KILOBYTE * 1000;
    const ONE_RCU_ON_TRANSACTIONAL_READ = self::ONE_KILOBYTE * 2;
    const ONE_RCU_ON_CONSISTENT_READ = self::ONE_KILOBYTE * 4;
    const ONE_RCU_ON_EVENTUAL_READ = self::ONE_KILOBYTE * 8;
    const ONE_WCU_ON_TRANSACTIONAL_WRITE = self::ONE_KILOBYTE / 2;
    const ONE_WCU_ON_WRITE = self::ONE_KILOBYTE;
    private int $id = 0;

    private float $countBytes = 0;
    private array $properties = [];
    private float $countConsistentRead = 0;
    private float $countWrite = 0;

    public function __construct(OutputInterface $output)
    {
        $this->setHeaderTitle("Read : BATCH GET / GET");
        parent::__construct($output);
    }

    public function addDynamoItem(array $item) {
        $this->countBytes        += $countBytes             = sizeDynamo($item);
        $this->countConsistentRead += $countConsistentRead     = ceil($this->countBytes / self::ONE_RCU_ON_CONSISTENT_READ);
        $this->countWrite += $countWrite              = ceil($this->countBytes / self::ONE_WCU_ON_WRITE);

        $countKyloBytes          = $this->countBytes / self::ONE_KILOBYTE;
        $countEventualRead       = $countConsistentRead / 2;
        $countTransactionalRead  = $countConsistentRead * 2;
        $countTransactionalWrite = $countWrite * 2;

        $values = [];
        foreach ($item as $key => $value) {
            if (!in_array($key, $this->properties)) {
                $this->properties[] = $key;
            }
            $values[] = substr($value['S'],0, 10);
        }

        $this->addRow([
            $this->id++,
            ...$values,
            sprintf('%.2f bytes', $countBytes),
            sprintf('%.2f kylo bytes', $countKyloBytes),
            sprintf('%.2f RCU', $countEventualRead),
            sprintf('%.2f RCU',$countConsistentRead),
            sprintf("%.2f RCU", $countTransactionalRead),
        ]);
    }

    public function render()
    {
        $countConsistentRead     = $this->countConsistentRead;
        $countWrite              = $this->countWrite;
        $countKyloBytes          = $this->countBytes / self::ONE_KILOBYTE;
        $countEventualRead       = $countConsistentRead / 2;
        $countTransactionalRead  = $countConsistentRead * 2;
        $countTransactionalWrite = $countWrite * 2;

        $this->setHeaders(["ID", ...$this->properties, "Bytes", "KyloBytes", "Eventual Read", "Strong consistent Read", "Transactional Read"]);
        $this->addRow(new TableSeparator());
        //  ceil($this->countBytes / self::FOUR_KILOBYTE) * self::FOUR_KILOBYTE
        $this->addRow([
            'Total',
            ...array_fill(0, count($this->properties), ''),
            sprintf('%.2f bytes', $this->countBytes),
            sprintf('%.2f kylo bytes', $countKyloBytes),
            sprintf('%.2f RCU', $countEventualRead),
            sprintf('%.2f RCU',$countConsistentRead),
            sprintf('%.2f RCU', $countTransactionalRead),
        ]);

        parent::render(); // TODO: Change the autogenerated stub
    }
}