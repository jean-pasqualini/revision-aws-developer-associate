Parameters:
  ApiId:
    Type: String
  RootResourceId:
    Type: String
  RoleIntegrationARN:
    Type: String

Resources:
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: rest-revision
      AttributeDefinitions:
        - AttributeName: "CharacterName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "CharacterName"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  ResourceDynamo:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiId
      ParentId: !Ref RootResourceId
      PathPart: "dynamo"

  ResourceDynamoGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiId
      ResourceId: !Ref ResourceDynamo
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      Integration:
        Type: AWS
        Credentials: !Ref RoleIntegrationARN
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: |
            {
              "TableName": "rest-revision",
              "KeyConditionExpression": "CharacterName=:CharacterName",
              "ExpressionAttributesValues": {":CharacterName":"Mario"}
            }
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                  "music": [
                    #foreach($field in $inputRoot.Items) {
                      "character": "$field.CharacterName.S",
                      "power": "$field.Power.S",
                      "life": $field.Life.N
                    }
                    #if($foreach.hasNext),#end
                    #end
                  ]
                }
      MethodResponses:
        - StatusCode: "200"

