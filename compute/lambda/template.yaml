Transform: AWS::Serverless-2016-10-31
Resources:
  ByeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: bye-sg
      GroupDescription: "bye sg security group"
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      VpcId: vpc-ee8b7486

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-packagetype
  ByeLambda:
    DependsOn:
      - SharedEFSAccessPoint
      - SharedEFSMountTarget
    Type: AWS::Serverless::Function
    Properties:
      # https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/automating-updates-to-serverless-apps.html
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-deploymentpreference.html
      #DeploymentPreference:
      #  Type: CodeDeployDefault.LambdaAllAtOnce
      VpcConfig:
        SecurityGroupIds: [!Ref ByeSecurityGroup]
        SubnetIds: ["subnet-2f3c2646"]
      #FileSystemConfigs:
      #  - Arn: !GetAtt SharedEFSAccessPoint.Arn
      #    LocalMountPath: "/mnt/shared"
      KmsKeyArn: arn:aws:kms:eu-west-3:935529178062:key/e3406326-3b44-4301-8ca5-8a5b023186e1
      #AutoPublishAlias: prod
      Description: "bye bye bye"
      FunctionName: bye-lambda
      Runtime: nodejs12.x
      MemorySize: 128
      CodeUri: ./src/bye
      Handler: index.lambda
      Environment:
        Variables:
          COLOR: RED
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AmazonElasticFileSystemClientFullAccess
      Timeout: 120
      DeadLetterQueue:
        Type: SNS
        TargetArn: arn:aws:sns:eu-west-3:935529178062:EmailNotified
      #ProvisionedConcurrencyConfig:
      #  ProvisionedConcurrentExecutions: 1
      ReservedConcurrentExecutions: 1
      Tracing: "Active"

  ByeCodeSigning:
    Type: AWS::Lambda::CodeSigningConfig
    Properties:
      AllowedPublishers:
        - SigningProfileVersionArns: []
      CodeSigningPolicies:
        - UntrustedArtifactOnDeployment: Enforce # Warn
      Description: "code signing config"

  # https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html
  # https://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-helper-ec2-linux.html
  # https://aws.amazon.com/blogs/compute/using-amazon-efs-for-aws-lambda-in-your-serverless-applications/
  SharedEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: false
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "elasticfilesystem:ClientMount"
            Principal:
                AWS: "*"

  # Mount target required
  SharedEFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SharedEFS
      SubnetId: "subnet-2f3c2646"
      SecurityGroups:
        - !Ref ByeSecurityGroup

  SharedEFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref SharedEFS
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0777"
        Path: "/myefs"

  ApiBye:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: bye-api

  ApiByeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiBye
      PathPart: "bye"
      ParentId: !GetAtt ApiBye.RootResourceId

  # https://nickolaskraus.org/articles/creating-an-amazon-api-gateway-with-a-lambda-integration-using-cloudformation/
  # https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/
  # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/aws-properties-apitgateway-method-integration.html#cfn-apigateway-method-integration-uri
  ApiByeMethod:
    DependsOn: ByeLambda
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiBye
      ResourceId: !Ref ApiByeResource
      HttpMethod: POST
      OperationName: "InvokeLambda"
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: arn:aws:lambda:eu-west-3:935529178062:function:bye-lambda:prod
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  ApiByeStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      TracingEnabled: true
      RestApiId: !Ref ApiBye
      DeploymentId: !Ref ApiByeDeployement

  ApiByeDeployement:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiByeMethod
    Properties:
      RestApiId: !Ref ApiBye

  ApiByePermissionInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub
        - "${lambdaArn}:${lambdaAlias}"
        - lambdaArn: !GetAtt ByeLambda.Arn
          lambdaAlias: "prod"
      Principal: apigateway.amazonaws.com
      # SourceArn: arn:aws:execute-api:us-east-1:ACCOUNT_ID:API_ID/*/METHOD/ENDPOINT
      # arn:aws:execute-api:eu-west-3:935529178062:py3se3doj9/*/POST/bye
      # To see on the fonction overview which is the source arn need to be filled but this is not required to work

Outputs:
  LambdaArn:
    Description: lambda arn
    Value: !GetAtt ByeLambda.Arn